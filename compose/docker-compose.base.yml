version: "3.8"

x-app:
  &default-app
  volumes:
    - /mnt:/mnt
  depends_on:
    - postgres
  environment:
    USE_DOCKER: 1
    DATABASE_URL: "psql://postgres:postgres@postgres:5432/postgres"
    RABBITMQ_URL: "amqp://rabbit"
    REDIS_URL: "redis://redis:6379/0"
    DJANGO_STATIC_ROOT: "/var/www/radis/static/"
    RABBIT_MANAGEMENT_HOST: "rabbit"
    RABBIT_MANAGEMENT_PORT: "15672"
    FLOWER_HOST: "flower"
    FLOWER_PORT: "5555"

services:
  web:
    <<: *default-app
    build:
      context: ..
    volumes:
      # Cave, overwrites the above anchor
      - /mnt:/mnt
      - radis_data:/var/www/radis

  postgres:
    image: postgres:13.11
    expose:
      - "5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  worker_default:
    <<: *default-app

  celery_beat:
    <<: *default-app

  flower:
    <<: *default-app
    expose:
      - "5555"
    command: >
      bash -c "
        wait-for-it -s rabbit:5672 -t 60 &&
        celery --broker=amqp://rabbit/ flower --url_prefix=flower
      "

  # RabbitMQ authentication can't be disabled. So when we try to log into
  # the management console we have to use "guest" as username and password.
  # The real authentication happens by RADIS itself, because the management
  # console is behind a ProxyView.
  rabbit:
    image: rabbitmq:3.12.2-management
    expose:
      - "5672"
      - "15672"
    configs:
      - source: rabbit_config
        target: /etc/rabbitmq/rabbitmq.conf
    volumes:
      - rabbit_data:/var/lib/rabbitmq

  redis:
    image: redis:7.0.12
    expose:
      - "6379"
    volumes:
      - redis_data:/data

configs:
  rabbit_config:
    file: ./rabbitmq/rabbitmq.conf

volumes:
  radis_data:
  postgres_data:
  rabbit_data:
  redis_data:
  flower_data:
