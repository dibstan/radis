version: "3.8"

x-app: &default-app
  restart: always
  image: radis_prod:latest
  env_file:
    - ../.env.prod
  environment:
    ENABLE_REMOTE_DEBUGGING: 0
    DJANGO_SETTINGS_MODULE: "radis.settings.production"
    SSL_CERT_FILE: "/var/www/radis/ssl/cert.pem"
    SSL_KEY_FILE: "/var/www/radis/ssl/key.pem"

services:
  web:
    <<: *default-app
    build:
      target: production
    ports:
      - "${RADIS_HTTP_PORT:-80}:80"
      - "${RADIS_HTTPS_PORT:-443}:443"
    command: >
      bash -c "
        wait-for-it -s postgres.local:5432 -t 60 && 
        ./manage.py migrate &&
        ./manage.py collectstatic --no-input &&
        ./manage.py create_admin &&
        ./manage.py generate_cert &&
        wait-for-it -s vespa.local:19071 -t 60 &&
        ./manage.py setup_vespa --generate --deploy &&
        echo 'Starting web server ...'
        daphne -b 0.0.0.0 -p 80 -e ssl:443:privateKey=/var/www/radis/ssl/key.pem:certKey=/var/www/radis/ssl/cert.pem radis.asgi:application
      "
    deploy:
      replicas: 1

  worker_default:
    <<: *default-app
    command: ./manage.py celery_worker -Q default_queue
    deploy:
      replicas: 1

  worker_llm:
    <<: *default-app
    command: ./manage.py celery_worker -c 1 -Q llm_queue
    deploy:
      replicas: 1

  celery_beat:
    <<: *default-app
    command: ./manage.py celery_beat
    deploy:
      replicas: 1

  flower:
    <<: *default-app
    deploy:
      replicas: 1

  llamacpp:
    image: llamacpp-server:latest
    restart: always
    volumes:
      - models_data:/models
    environment:
      MODEL_URL: https://huggingface.co/TheBloke/Mistral-7B-Instruct-v0.2-GGUF/resolve/main/mistral-7b-instruct-v0.2.Q4_K_M.gguf 
    command: >
      bash -c '
        if [ ! -f /models/model.gguf ]; then
          echo "Downloading model: $${MODEL_URL}"
          wget -q -O /models/model.gguf $${MODEL_URL}
        else
          echo "Model file already exists. Skipping download."
        fi
        /server -m /models/model.gguf -c 512 --host 0.0.0.0 --port 8080
      '
    deploy:
      replicas: 1

  postgres:
    restart: always
    env_file:
      - ../.env.prod
    deploy:
      replicas: 1

  vespa:
    restart: always
    deploy:
      replicas: 1

  rabbit:
    restart: always
    deploy:
      replicas: 1

  redis:
    restart: always
    deploy:
      replicas: 1

volumes:
  models_data: